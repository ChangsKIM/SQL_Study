SELECT * FROM PERSON;
SELECT * FROM STUDENT s ;

-- 조회
SELECT STD_NAME,  STD_SCORE FROM STUDENT s
WHERE  STD_SCORE BETWEEN 1.2 AND 2.5
ORDER BY STD_SCORE;

-- 컬럼 추가
ALTER TABLE PERSON ADD BIRTH DATE;

UPDATE PERSON SET BIRTH = '1986-07-2'
WHERE P_NAME = '김창수';

UPDATE PERSON SET BIRTH = SYSDATE ;

ALTER TABLE PERSON ADD P_NO INT;
UPDATE PERSON SET P_NO = ROWNUM;


SELECT DISTINCT STD_NO, STD_NAME, STD_SCORE FROM STUDENT 
-- WHERE STD_SCORE = 2.4;
WHERE   STD_SCORE BETWEEN  2.0 AND 2.5 
ORDER BY  STD_SCORE;

SELECT * FROM STUDENT
WHERE STD_SCORE < 1.07;

DELETE FROM STUDENT WHERE STD_SCORE < 1.0;

UPDATE STUDENT SET STD_SCORE = NULL 
WHERE STD_SCORE < 1.07;

UPDATE PERSON SET P_NO = NULL 
WHERE P_NO > 3;

SELECT * FROM PERSON ;

SELECT NANVL(P_NO, 0) FROM PERSON ; 

SELECT NVL2(P_NO, 'HAS NO', 'NOT NO') FROM PERSON; 



SELECT DECODE(STD_SCORE, 4.0, 'A+', 3.5, 'A', 3.0, 'B', 'F') AS GRADE
FROM STUDENT;


SELECT SUBSTR(STD_NO, 1, 4), STD_NAME 
FROM STUDENT s ;

SELECT EMP_NAME, DENSE_RANK() OVER(ORDER BY EMP_SALARY) , 
				TO_CHAR(EMP_COURSE_DATE, 'YYYY') 
FROM EMPLOYEE e ;

SELECT 
	DENSE_RANK () OVER(PARTITION BY SUBSTR(STD_NAME, 1, 1) 
	ORDER BY STD_SCORE), 
	SUBSTR(STD_NO , 1, 4)	
FROM STUDENT ;


SELECT 
	DENSE_RANK() OVER(PARTITION BY SUBSTR(S.STD_NAME, 1, 1) 
	ORDER BY S.STD_SCORE) AS SCORE_RANK, 
	S.* 
	FROM STUDENT S;

SELECT 
	SUBSTR(STD_NO, 1, 4), 
	DENSE_RANK () OVER (PARTITION BY SUBSTR(STD_NAME, 1, 1)
	ORDER BY STD_SCORE) AS score_rank,
	STD_NAME
FROM STUDENT ;


SELECT 
	SUBSTR(STD_NO, 1, 4), 
	DENSE_RANK () OVER (PARTITION BY SUBSTR(STD_NO , 1, 4)
	ORDER BY STD_SCORE) AS score_rank,
	STD_NAME
FROM STUDENT ;

SELECT 
	m.MAJOR_NAME ,
	sum(s.STD_SCORE)
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
GROUP BY m.MAJOR_NAME ;

-- 학과별 평점 최고 값, 최소 값
SELECT 
	MAJOR_NAME ,
	MAX(s.STD_SCORE) AS 최고점수,
	MIN(s.STD_SCORE) AS 최소점수 
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
GROUP BY  m.MAJOR_NAME ;


-- 학과별 인원수 조회. 단, 평점이 3.0이상인 사람만
SELECT 
	m.MAJOR_NAME,
	COUNT(*),
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
WHERE s.STD_SCORE > 3.0
GROUP BY m.MAJOR_NAME ;










