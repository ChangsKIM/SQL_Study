SELECT * FROM PERSON;
SELECT * FROM STUDENT s ;

-- 조회
SELECT STD_NAME,  STD_SCORE FROM STUDENT s
WHERE  STD_SCORE BETWEEN 1.2 AND 2.5
ORDER BY STD_SCORE;

-- 컬럼 추가
ALTER TABLE PERSON ADD BIRTH DATE;

UPDATE PERSON SET BIRTH = '1986-07-2'
WHERE P_NAME = '김창수';

UPDATE PERSON SET BIRTH = SYSDATE ;

ALTER TABLE PERSON ADD P_NO INT;
UPDATE PERSON SET P_NO = ROWNUM;


SELECT DISTINCT STD_NO, STD_NAME, STD_SCORE FROM STUDENT 
-- WHERE STD_SCORE = 2.4;
WHERE   STD_SCORE BETWEEN  2.0 AND 2.5 
ORDER BY  STD_SCORE;

SELECT * FROM STUDENT
WHERE STD_SCORE < 1.07;

DELETE FROM STUDENT WHERE STD_SCORE < 1.0;

UPDATE STUDENT SET STD_SCORE = NULL 
WHERE STD_SCORE < 1.07;

UPDATE PERSON SET P_NO = NULL 
WHERE P_NO > 3;

SELECT * FROM PERSON ;

SELECT NANVL(P_NO, 0) FROM PERSON ; 

SELECT NVL2(P_NO, 'HAS NO', 'NOT NO') FROM PERSON; 



SELECT DECODE(STD_SCORE, 4.0, 'A+', 3.5, 'A', 3.0, 'B', 'F') AS GRADE
FROM STUDENT;


SELECT SUBSTR(STD_NO, 1, 4), STD_NAME 
FROM STUDENT s ;

SELECT EMP_NAME, DENSE_RANK() OVER(ORDER BY EMP_SALARY) , 
				TO_CHAR(EMP_COURSE_DATE, 'YYYY') 
FROM EMPLOYEE e ;

SELECT 
	DENSE_RANK () OVER(PARTITION BY SUBSTR(STD_NAME, 1, 1) 
	ORDER BY STD_SCORE), 
	SUBSTR(STD_NO , 1, 4)	
FROM STUDENT ;


SELECT 
	DENSE_RANK() OVER(PARTITION BY SUBSTR(S.STD_NAME, 1, 1) 
	ORDER BY S.STD_SCORE) AS SCORE_RANK, 
	S.* 
	FROM STUDENT S;

SELECT 
	SUBSTR(STD_NO, 1, 4), 
	DENSE_RANK () OVER (PARTITION BY SUBSTR(STD_NAME, 1, 1)
	ORDER BY STD_SCORE) AS score_rank,
	STD_NAME
FROM STUDENT ;


SELECT 
	SUBSTR(STD_NO, 1, 4), 
	DENSE_RANK () OVER (PARTITION BY SUBSTR(STD_NO , 1, 4)
	ORDER BY STD_SCORE) AS score_rank,
	STD_NAME
FROM STUDENT ;

SELECT 
	m.MAJOR_NAME ,
	sum(s.STD_SCORE)
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO
GROUP BY m.MAJOR_NAME ;

-- 학과별 평점 최고 값, 최소 값
SELECT 
	MAJOR_NAME ,
	MAX(s.STD_SCORE) AS 최고점수,
	MIN(s.STD_SCORE) AS 최소점수 
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
GROUP BY  m.MAJOR_NAME ;


-- 학과별 인원수 조회. 단, 평점이 3.0이상인 사람만
SELECT 
	m.MAJOR_NAME,
	COUNT(*)
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
WHERE s.STD_SCORE < 3.0
GROUP BY m.MAJOR_NAME ;

SELECT 
	s.STD_NO AS 입학년도,
	m.MAJOR_NAME AS 학과,
	s.STD_GENDER AS 성별,
	COUNT(*) AS 인원수,
	TRUNC(AVG(s.STD_SCORE),2) AS 평균점수,
	SUM(s.STD_SCORE) 
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
GROUP BY s.STD_NO , m.MAJOR_NAME , s.STD_GENDER ;


-- 입학년도별, 학과별 인원수, 평점평균, 평점총합 조회
SELECT 
	SUBSTR(s.STD_NO, 1, 4) AS 입학년도,
	m.MAJOR_NAME AS 학과명,
	COUNT(*) AS 인원수,
	TRUNC(AVG(s.STD_SCORE), 2) AS 평점평균,
	SUM(s.STD_SCORE) AS 평균총합 
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
GROUP BY SUBSTR(s.STD_NO, 1, 4) , m.MAJOR_NAME; 


SELECT 
	SUBSTR(s.STD_NO,1,4) AS YEAR,
	s.STD_NAME , s.STD_GENDER, 
	TRUNC(AVG(s.STD_SCORE),2) AS STD_AVG_SCORE,
	SUM(s.STD_SCORE) AS STD_SUM_SCORE 
FROM STUDENT s JOIN MAJOR m ON s.MAJOR_NO = m.MAJOR_NO 
GROUP BY CUBE (SUBSTR(s.STD_NO,1,4), 
				s.STD_NAME, m.MAJOR_NAME, s.STD_GENDER);

-- 학생정보 조회. 학번, 이름, 학과명, 평점 출력 (동일 조회)

SELECT  
	S.STD_NO , S.STD_NAME , M.MAJOR_NAME , S.STD_SCORE 
FROM STUDENT s 
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO;
-- GROUP BY S.STD_NO , S.STD_NAME , M.MAJOR_NAME , S.STD_SCORE;

-- 자연조인 NATUNAL JOIN
SELECT * FROM STUDENT NATURAL JOIN MAJOR;			
			
------------------------------------------------------------------
-- 조인 문제
-- 01. 학생정보 조회. 학번, 이름, 학과명, 평점 출력
SELECT
	S.STD_NO AS 학번, S.STD_NAME AS 이름, M.MAJOR_NAME AS 학과명, S.STD_SCORE 
FROM STUDENT s 
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO ;


-- PERSON TABLE의 P_NO COLUMN 삭제 
ALTER TABLE PERSON DROP COLUMN P_NO;

-- PERSON TABLE 삭제
DROP TABLE PERSON;

-- PERSON 테이블 생성
CREATE TABLE PERSON(
	PID CHAR(4),
	PNAME VARCHAR2(30),
	PAGE NUMBER(3)
);

-- PID에 기본키 설정하기
ALTER TABLE PERSON ADD CONSTRAINT PERSON_PID_PK
PRIMARY KEY(PID);

SELECT * FROM USER_CONSTRAINTS;

DROP TABLE PERSON;

-- 장학금 받은 학생 조회. 장학금번호, 학생번호, 금액
SELECT 
	SS.SCHOLARSHIP_NO ,
	S.STD_NO ,
	SS.MONEY 
FROM STUDENT s JOIN SUDENT_SCHOLARSHRIP ss ON S.STD_NO = SS.STD_NO ;

-- 장학금을 받은 학생 조회. 학번, 이름, 학과명, 평점, 성별, 받은 금액
SELECT 
	SS.SCHOLARSHIP_NO, S.STD_NO, 
	M.MAJOR_NAME, S.STD_SCORE, SS.MONEY, S.STD_GENDER 
FROM STUDENT s 
JOIN SUDENT_SCHOLARSHRIP ss ON S.STD_NO = SS.STD_NO
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO 

INSERT INTO MAJOR VALUES('A9', '국어국문학과');
INSERT INTO MAJOR VALUES('B2', '생활체육학과');

SELECT
S.*, M.*
FROM STUDENT S RIGHT OUTER JOIN MAJOR M
ON S.MAJOR_NO = M.MAJOR_NO;

-- 학생이 한명도 없는 학과 조회
-- 일치하지 않는 데이터를 조회 << 불일치 쿼리
SELECT S.*, S.STD_NAME, 
M.MAJOR_NAME 
FROM STUDENT s 
RIGHT OUTER JOIN MAJOR m 
ON S.MAJOR_NO = M.MAJOR_NO 
WHERE S.STD_NAME IS NULL;

-- 장학금을 받지 못한 학생 출력
SELECT
	SS.SCHOLARSHIP_NO ,
	S.STD_NAME ,
	M.MAJOR_NAME
FROM STUDENT s 
LEFT OUTER JOIN SUDENT_SCHOLARSHRIP ss ON S.STD_NO = SS.STD_NO 
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO 
WHERE SS.SCHOLARSHIP_NO IS NULL;

-- 학과별로 장학금을 받은 학생들 조회.
-- 단 학과, 성별을 기준으로 인원수, 최고평점, 최저평점 조회
SELECT
	M.MAJOR_NAME ,
	S.STD_GENDER ,
	COUNT(*),
	MAX(S.STD_SCORE),
	MIN(S.STD_SCORE) 
FROM STUDENT s 
JOIN SUDENT_SCHOLARSHRIP ss ON S.STD_NO = SS.STD_NO 
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO 
GROUP BY M.MAJOR_NAME , S.STD_GENDER ;

-- 장학금을 받지 못한 한생들 조회. 단, 학과별 인원수만 조회

SELECT 
	M.MAJOR_NAME,
	COUNT(*) 
FROM STUDENT s 
LEFT OUTER JOIN SUDENT_SCHOLARSHRIP ss ON S.STD_NO = SS.STD_NO 
JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO 
WHERE SS.SCHOLARSHIP_NO IS NULL 
GROUP BY M.MAJOR_NAME ;


------------------------------------------------------------------
-- CAR TABLE 문제

-- 자동차 제조사별 자동차 제품 개수, 평균가, 최고가, 최소가 조회

SELECT 
	CM.CAR_MAKER_NAME , COUNT(*) AS 차량수,
	TRUNC(AVG(C.CAR_PRICE)) AS 평균가,
	MAX(C.CAR_PRICE) AS 최고가,
	MIN(C.CAR_PRICE) AS 최저가 
FROM CAR c 
JOIN CAR_MAKER cm ON C.CAR_MAKER_CODE = CM.CAR_MAKER_CODE 
GROUP BY CM.CAR_MAKER_NAME ;


-- 한번도 판매되지 않은 자동차 목록 조회
-- 자동차 번호, 자동차 모델명, 제조사명 
SELECT 
	CM.CAR_MAKER_CODE ,
	C.CAR_NAME ,
	CM.CAR_MAKER_NAME, 
	C.CAR_PRICE 
FROM CAR c LEFT OUTER JOIN CAR_SELL cs ON C.CAR_ID = CS.CAR_ID 
JOIN CAR_MAKER cm ON C.CAR_MAKER_CODE = CM.CAR_MAKER_CODE 
WHERE c.CAR_ID IS NULL ;
--GROUP BY CM.CAR_MAKER_NAME , C.CAR_NAME , CM.CAR_MAKER_CODE ;

-- 판매 연도별, 제조사별, 판매 대수 총합, 판매 금액 총합, 판매금액 평균 조회
SELECT 
	C.CAR_MAKE_YEAR ,
	CM.CAR_MAKER_NAME ,
	SUM(CS.CAR_SELL_EA) AS "판대 대수 총합",
	SUM(CS.CAR_SELL_PRICE) AS "판대 금액 총합",
	TRUNC(AVG(CS.CAR_SELL_PRICE), 2) "판매 금액 평균" 
FROM CAR c 
JOIN CAR_MAKER cm ON C.CAR_MAKER_CODE = CM.CAR_MAKER_CODE 
JOIN CAR_SELL cs ON C.CAR_ID = CS.CAR_ID
GROUP BY C.CAR_MAKE_YEAR , CM.CAR_MAKER_NAME ;

-- 학생 테이블에 평점 0.0~4.5까지만 저장되게끔 하는 제약조건

ALTER TABLE STUDENT ADD CONSTRAINT STUDENT_SCORE_CHK
CHECK(STD_SCORE BETWEEN 0.0 AN 4.5);


-- SUB QUERY
-- 평점이 최고점에 해당하는 학생정보 조회
SELECT * FROM STUDENT
WHERE STD_SCORE = (SELECT MAX(STD_SCORE)FROM STUDENT );

-- 평점이 최고점인 학생과 최저점인 학생 조회
-- 조회할 컬럼 ; 학번, 이름, 학과명, 평점, 성별
SELECT 
	S.STD_NO ,
	S.STD_NAME ,
	M.MAJOR_NAME ,
	S.STD_GENDER ,
	S.STD_SCORE 
FROM STUDENT s JOIN MAJOR m ON S.MAJOR_NO = M.MAJOR_NO 
WHERE S.STD_SCORE IN ((SELECT MAX(S.STD_SCORE) FROM STUDENT),
					(SELECT MIN(S.STD_SCORE) FROM STUDENT))
GROUP BY S.STD_NO ,
	S.STD_NAME ,
	M.MAJOR_NAME ,
	S.STD_GENDER ,
	S.STD_SCORE;

SELECT * FROM STUDENT
WHERE (MAJOR_NO, STD_SCORE) 
IN (SELECT MAJOR_NO, MAX(STD_SCORE) 
FROM STUDENT GROUP BY MAJOR_NO);

-- 03. 조인을 이용해서 조회
SELECT s.* FROM STUDENT s 
JOIN (SELECT MAJOR_NO, MAX(STD_SCORE) AS MAX_SCORE FROM STUDENT 
GROUP BY MAJOR_NO) m 
ON s.MAJOR_NO = m.MAJOR_NO AND s.STD_SCORE = m.MAX_SCORE;











